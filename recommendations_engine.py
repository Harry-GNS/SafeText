"""
Sistema de Recomendaciones Simplificado para SafeText
Solo 3 recomendaciones b√°sicas seg√∫n nivel de riesgo
"""

def get_recommendations_for_analysis(analysis_result):
    """
    Funci√≥n simplificada para obtener recomendaciones b√°sicas seg√∫n el nivel de riesgo
    
    Args:
        analysis_result (dict): Resultado del an√°lisis de ciberacoso
        
    Returns:
        dict: Respuesta con la recomendaci√≥n seg√∫n el nivel de riesgo
    """
    try:
        # Determinar nivel de riesgo
        is_cyberbullying = analysis_result.get('is_cyberbullying', False)
        risk_level = analysis_result.get('risk_level', 'Low')
        
        # 3 recomendaciones b√°sicas seg√∫n el nivel de riesgo
        if not is_cyberbullying or risk_level == 'Low':
            # SEGURO - Nivel bajo o sin ciberacoso
            recommendation = {
                "id": "safe_basic",
                "icon": "‚úÖ",
                "title": "Contenido Seguro",
                "description": "El texto analizado muestra una comunicaci√≥n apropiada y respetuosa.",
                "action": "Contin√∫e promoviendo este tipo de comunicaci√≥n positiva en el entorno digital. Mantenga las buenas pr√°cticas establecidas.",
                "priority": 1
            }
        elif risk_level == 'Medium':
            # MEDIO - Nivel medio de riesgo
            recommendation = {
                "id": "medium_basic",
                "icon": "‚ö†Ô∏è",
                "title": "Atenci√≥n Requerida",
                "description": "Se detectaron elementos que requieren supervisi√≥n moderada.",
                "action": "Implemente medidas preventivas como sesiones de educaci√≥n sobre comunicaci√≥n respetuosa. Monitoree la situaci√≥n de cerca.",
                "priority": 2
            }
        else:
            # PELIGROSO - Nivel alto o muy alto
            recommendation = {
                "id": "danger_basic",
                "icon": "üö®",
                "title": "Situaci√≥n Cr√≠tica",
                "description": "Se detect√≥ contenido altamente problem√°tico que requiere intervenci√≥n inmediata.",
                "action": "Tome medidas urgentes: documente la evidencia, notifique a las autoridades competentes y proporcione apoyo inmediato a la v√≠ctima.",
                "priority": 1
            }
        
        return {
            "success": True,
            "recommendation": recommendation
        }
        
    except Exception as e:
        # Recomendaci√≥n de respaldo
        fallback_recommendation = {
            "id": "fallback_basic",
            "icon": "üìö",
            "title": "Educaci√≥n y Prevenci√≥n",
            "description": "La educaci√≥n continua es la mejor herramienta para prevenir el ciberacoso.",
            "action": "Implemente programas de concientizaci√≥n sobre comunicaci√≥n digital responsable y respeto en l√≠nea.",
            "priority": 1
        }
        
        return {
            "success": False,
            "error": str(e),
            "recommendation": fallback_recommendation
        }


if __name__ == "__main__":
    # Ejemplos de uso para testing
    print("=== PRUEBAS DE LOS 3 NIVELES ===\n")
    
    # Ejemplo 1: SEGURO
    test_safe = {'is_cyberbullying': False, 'risk_level': 'Low'}
    result_safe = get_recommendations_for_analysis(test_safe)
    print("üü¢ NIVEL SEGURO:")
    print(f"   T√≠tulo: {result_safe['recommendation']['title']}")
    print(f"   Icono: {result_safe['recommendation']['icon']}")
    print(f"   Descripci√≥n: {result_safe['recommendation']['description']}\n")
    
    # Ejemplo 2: MEDIO
    test_medium = {'is_cyberbullying': True, 'risk_level': 'Medium'}
    result_medium = get_recommendations_for_analysis(test_medium)
    print("üü° NIVEL MEDIO:")
    print(f"   T√≠tulo: {result_medium['recommendation']['title']}")
    print(f"   Icono: {result_medium['recommendation']['icon']}")
    print(f"   Descripci√≥n: {result_medium['recommendation']['description']}\n")
    
    # Ejemplo 3: PELIGROSO
    test_danger = {'is_cyberbullying': True, 'risk_level': 'High'}
    result_danger = get_recommendations_for_analysis(test_danger)
    print("üî¥ NIVEL PELIGROSO:")
    print(f"   T√≠tulo: {result_danger['recommendation']['title']}")
    print(f"   Icono: {result_danger['recommendation']['icon']}")
    print(f"   Descripci√≥n: {result_danger['recommendation']['description']}")
